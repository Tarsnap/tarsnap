#compdef tarsnap

# zsh completion function for tarsnap 1.0.37

# Set the following variable to the path of a file containing the output from "tarsnap --list-archives" 
# i.e. one archive name per line. If left blank then archive names will not be completed.
local archivefile=

local -a reply matchany number files directories archives keyfile cachedir patterns attarfile atatarchivename
# matches any word (e.g. the the first command word)
matchany=(/$'[^\0]##\0'/)
# matches any number
number=(/$'[0-9]##\0'/ ':number:decimal number:( )')
# completes files
files=("$matchany" ':file:file:_files')
# completes directories
directories=("$matchany" ':dir:directory:{_path_files -/}')
# completes --keyfile option
keyfile=(/$'--keyfile\0'/ ':opts:options:(--keyfile)' "$matchany" ':file:file:_files')
# completes --cachedir option
cachedir=(/$'--cachedir\0'/ ':opts:options:(--cachedir)' "$matchany" ':file:file:{_path_files -/}')
# completes -f (archive) option 
function _tarsnap_archives() {
    local -a archivesarr
    archivesarr=( "${(f)$(cat ${1})}" )
    compadd -a archivesarr
}
archives=(/$'-f\0'/ ':opts:options:(-f)' /$'[^\0]##\0'/ ":archive:archive:{_tarsnap_archives $archivefile}")
# completes patterns
patterns=("$matchany" ':patterns:glob pattern matching files to be viewed/extracted:')
# complete tar file with @ at beginning (for -c command). Need to make sure it doesnt match @@<FILE>.
attarfile=(/$'@'/ ':option:option:(@)' /$'[^@][^\0]##\0'/ ":file:file:_files")
# complete archive name with @@ at beginning (for -c command)
atatarchivename=(/$'@@'/ ':option:option:(@@)' /$'[^\0]##\0'/ ":archive:archive:{_tarsnap_archives $archivefile}")
local -a commonopts copts dopts ropts topts xopts laopts psopts reopts fsckopts nuopts
# options common to all commands
_regex_words opts "options" \
	     '--configfile:add file to the list of configuration files to be read:$files' \
	     '--humanize-numbers:use SI prefixes to make numbers printed by --print-stats more readable' \
	     '--maxbw-rate:limit download and upload bandwidth used to ARG bytes per second:$number' \
	     '--maxbw-rate-down:limit download bandwidth used to ARG bytes per second:$number' \
	     '--maxbw-rate-up:limit upload bandwidth used to ARG bytes per second:$number' \
	     '--noisy-warnings:be verbose when warning about network glitches' \
	     '--normalmem:ignore any lowmem or verylowmem option specified in a configuration file' \
	     '--no-aggressive-networking:ignore any aggressive-networking option specified in a configuration file' \
	     '--no-config-exclude:ignore any exclude option specified in a configuration file' \
	     '--no-config-include:ignore any include option specified in a configuration file' \
	     '--no-config-default:do not read the default configuration files' \
	     '--no-disk-pause:ignore any disk-pause option specified in a configuration file' \
	     '--no-humanize-numbers:ignore any humanize-numbers option specified in a configuration file' \
	     '--no-insane-filesystems:ignore any insane-filesystems option specified in a configuration file' \
	     '--no-maxbw:ignore any maximum bandwidth option specified in a configuration file' \
	     '--no-maxbw-rate-down:ignore any download maximum bandwidth option specified in a configuration file' \
	     '--no-maxbw-rate-up:ignore any upload maximum bandwidth option specified in a configuration file' \
	     '--no-nodump:ignore any nodump option specified in a configuration file' \
	     '--no-print-stats:ignore any print-stats option specified in a configuration file' \
	     '--no-quiet:ignore any quiet option specified in a configuration file' \
	     '--no-retry-forever:ignore any retry-forever option specified in a configuration file' \
	     '--no-snaptime:ignore any snaptime option specified in a configuration file' \
	     '--no-store-atime:ignore any store-atime option specified in a configuration file' \
	     '--no-totals:ignore any totals option specified in a configuration file' \
	     '--quiet:avoid printing some warnings' \
	     '--retry-forever:continue trying to connect to the tarsnap server forever instead of giving up after 5-10 minutes' \
	     '-s:modify file or archive member names according to pattern' \
	     '--verify-config:check the configuration file for syntactic errors' \
	     '--version:print version number of tarsnap and exit'
commonopts=("$reply[@]")
# Other options (listed individually so they can be used in more than one _regex_words specification)
local aggressivenetworkingopt='--aggressive-networking:use multiple TCP connections to send data to the tarsnap server'
local changediropt='-C:change directory before adding files:$directories'
local checklinksopt='--check-links:issue a warning message unless all links to each file are archived'
local checkpointbytesopt='--checkpoint-bytes:create a checkpoint after every ARG bytes of uploaded data'
local creationtimeopt='--creationtime:manually specify a creation time (a unix timestamp) for the archive:$number'
local diskpauseopt='--disk-pause:pause for ARG ms between storing archive entries and after every 64kB of file data:$number'
local dryrunopt='--dry-run:dont really create an archive just simulate doing so'
local excludeopt='--exclude:do not process files or directories that match the specified pattern:$matchany'
local Hopt='-H:symbolic links named on the command line will be followed - the target link will be archived, not the link itself'
local includeopt='--include:process only files or directories that match the specified pattern:$matchany'
local insanefilesystemsopt='--insane-filesystems:allow descent into the synthetic filesystems such as procfs'
local Lopt='-L:all symbolic links will be followed'
local lowmemopt='--lowmem:reduce memory usage by not caching small files'
local maxbwopt='--maxbw:interrupt archival if more than ARG bytes of upstream bandwidth is used:$number'
local nopt='-n:do not recursively archive the contents of directories'
local neweropt='--newer:only include files and directories newer than the specified date:$matchany'
local newermtimeopt='--newer-mtime:like --newer, except it compares mtime entries instead of ctime entries:$matchany'
local newerthanopt='--newer-than:only include files and directories newer than the specified file (by ctime entries):$files'
local newermtimethanopt='--newer-mtime-than:like --newer-than, except it compares mtime entries instead of ctime entries:$files'
local nodumpopt='--nodump:honor the nodump file flag by skipping this file'
local onefilesystemopt='--one-file-system:do not cross mount points'
local Popt='-P:preserve pathnames'
local printstatsopt='--print-stats:print statistics for the archive being created (c mode) or deleted (d mode)'
local snaptimeopt='--snaptime:MUST be used when creating filesystem snapshot backups, ARG is file with modification time prior to snapshot creation time:$files'
local storeatimeopt='--store-atime:enable the storing of file access times'
local Topt='-T:in x or t mode read the list of names to be extracted from the specified filename ARG'
local nullopt='--null:filenames or patterns are separated by null characters, not by newlines'
local totalsopt='--totals:print the size of the archive after creating it'
local verylowmemopt='--verylowmem:reduce memory usage, by not caching anything'
local vopt='-v:produce verbose output'
local wopt='-w:ask for confirmation for every action'
local Xopt='-X:read a list of exclusion patterns from the specified file ARG'
local keepgoingopt='--keep-going:continue deleting/printing statistics after finding one of the archives doesnt exit'
local qopt='-q:extract or list only the first archive entry that matches each pattern or filename operand'
local Oopt='-O:in extract (-x) mode, files will be written to stdout, in list mode (-t) output will be written to stderr'
local Copt='-C:change directory before adding files:$directories'
local chrootopt='--chroot:chroot to the current directory after processing any -C options and before extracting any files'
local kopt='-k:do not overwrite existing files'
local keepnewerfilesopt='--keep-newer-files:dont overwrite existing files newer than versions in the archive being extracted'
local mopt='-m:do not extract modification time'
local numericowneropt='--numeric-owner:ignore symbolic user and group names when restoring archives to disk (obey numeric values)'
local oopt='-o:use the user and group of the user running the program rather than those specified in the archive'
local popt='-p:preserve file permissions'
local Sopt='-S:extract files as sparse files'
local stripcomponentsopt='--strip-components:remove the specified ARG number of leading path elements'
local Uopt='-U:unlink files before creating them'
local csvfileopt='--csv-file:write statistics in CSV format to a file:$files'
local patternopt=' :glob pattern matching files to be viewed/extracted:'
# options for the create command
_regex_words opts "options" "$aggressivenetworkingopt" "$changediropt" "$checklinksopt" "$creationtimeopt" "$diskpauseopt" "$dryrunopt" "$excludeopt" "$Hopt" "$includeopt" "$insanefilesystemsopt" "$Lopt" "$lowmemopt" "$maxbwopt" "$nopt" "$neweropt" "$newermtimeopt" "$newerthanopt" "$newermtimethanopt" "$nodumpopt" "$onefilesystemopt" "$Popt" "$printstatsopt" "$snaptimeopt" "$storeatimeopt" "$Topt" "$nullopt" "$totalsopt" "$verylowmemopt" "$vopt" "$wopt" "$Xopt"
copts=("(" "$keyfile[@]" "|" ")" "(" "$cachedir[@]" "|" ")" "$archives[@]" "(" "$reply[@]" "|" "$commonopts[@]" "|" "$atatarchivename[@]" "|" "$attarfile[@]" ")" \# "(" "$files[@]" ")" \#)
# options for the delete command
_regex_words opts "options" "$keepgoingopt" "$printstatsopt"
dopts=("(" "$keyfile[@]" "|" ")" "(" "$cachedir[@]" "|" ")" "$archives[@]" "(" "$reply[@]" "|" "$commonopts[@]" ")" \#)
# options for the read command
ropts=("(" "$keyfile[@]" "|" ")" "$archives[@]")
# options for the list command
_regex_words opts "options" "$excludeopt" "$includeopt" "$Oopt" "$Popt" "$qopt" "$Topt" "$nullopt" "$vopt" "$Xopt" "$patternopt"
topts=("(" "$keyfile[@]" "|" ")" "$archives[@]" "(" "$reply[@]" "|" "$commonopts[@]" ")" \# "(" "$patterns[@]" ")" \#)
# options for the extract command
_regex_words opts "options" "$Copt" "$chrootopt" "$excludeopt" "$includeopt" "$kopt" "$keepnewerfilesopt" "$mopt" "$Oopt" "$Popt" "$qopt" "$oopt" "$popt" "$numericowneropt" "$Sopt" "$stripcomponentsopt" "$Topt" "$nullopt" "$Uopt" "$vopt" "$wopt" "$Xopt" "$patternopt"
xopts=("(" "$keyfile[@]" "|" ")" "$archives[@]" "(" "$reply[@]" "|" "$commonopts[@]" ")" \# "(" "$patterns[@]" ")" \#)
# options for list-archives command
lsopts=("$keyfile[@]")
# options for the print-stats command
psopts=("(" "$keyfile[@]" "|" ")" "(" "$cachedir[@]" "|" ")" "$archives[@]")
# options for the recover, fsck and fsck-prune commands
fsckopts=("(" "$keyfile[@]" "|" ")" "$cachedir[@]")
# options for the nuke command
nuopts=("$keyfile[@]")

# tarsnap commands
local -a tscmds
_regex_words cmds "commands" \
	     '-c:create an archive containing the specified items and name:$copts' \
	     '-d:delete the specified archive:$dopts' \
	     '-t:list archive contents to stdout:$topts' \
	     '-x:extract to disk from the archive:$xopts' \
	     '-r:read the specified archive, convert it to a tar stream, and write it to stdout:$ropts' \
	     '--list-archives:print the names of archives stored:$lsopts' \
	     '--print-stats:print global statistics concerning stored archives:$psopts' \
	     '--recover:recover a partial archive from a checkpoint if such an archive exists:$fsckopts' \
	     '--fsck:perform some integrity checks on the stored archives, and reconstruct cache directory:$fsckopts' \
	     '--fsck-prune:run as --fsck, but if corrupt archives are detected, prune the broken data:$fsckopts' \
	     '--nuke:delete all of the archives stored:$nuopts' \
	     '--verify-config:checks the configuration file(s) for syntactic errors' \
	     '--version:print the version number of tarsnap, and exit'
tscmds=("$reply[@]")

# Create the completion function
_regex_arguments _tarsnap  "$matchany" "${tscmds[@]}"

# Run the completion function
_tarsnap "$@"

